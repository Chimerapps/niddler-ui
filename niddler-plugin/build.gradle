apply from: '../dependencies.gradle'

apply plugin: "org.jetbrains.intellij"
apply plugin: 'kotlin'

def actualPluginVersion = hasProperty("internalBuildNumber") ? "$pluginVersion-$internalBuildNumber" : "$pluginVersion"

def localProperties = new Properties()
localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
def StudioCompilePath = localProperties.getProperty('StudioCompilePath')

group 'com.icapps'
version actualPluginVersion
sourceCompatibility = 1.8

intellij {
    version versions.minIntelliJ
    updateSinceUntilBuild false
//    plugins "Dart:192.6459", "java"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

configurations {
    ftpAntTask
}

sourceSets {
    main.java.srcDirs += "src/main/kotlin"
}

dependencies {
    ftpAntTask("org.apache.ant:ant-commons-net:1.10.5") {
        module("commons-net:commons-net:1.4.1") {
            dependencies "oro:oro:2.0.8:jar"
        }
    }
    compileOnly fileTree(dir: "$StudioCompilePath/plugins/android/lib", include: ['*.jar'])
    compileOnly fileTree(dir: "$StudioCompilePath/lib", include: ['*.jar'])

    deps.pluginCompile.each { name, dep ->
        implementation(dep) {
            exclude group: 'org.slf4j', module: 'slf4j-api'
        }
    }
    implementation(project(path: ':client-lib', configuration: 'default')) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
}

tasks.create("buildTranslationsEnum") {
    doLast {
        def translationProperties = new Properties()
        translationProperties.load(project.rootProject.file("niddler-plugin/src/main/resources/translations/translations.properties").newInputStream())

        def file = project.rootProject.file("niddler-plugin/src/main/kotlin/com/chimerapps/niddler/ui/util/localization/Tr.kt")
        file.write "package com.chimerapps.niddler.ui.util.localization\n\n"
//        file << "import com.chimerapps.niddler.ui.util.localization.Localization\n\n"
        file << "enum class Tr(val key: String) {\n"
        def sorted = new TreeSet<String>()
        translationProperties.propertyNames().each {
            sorted.add(it.toString());
        }
        def c = 0
        sorted.each { string ->
            def parts = string.split('\\.')
            def str = ""
            for (int i = 1; i < parts.length; ++i) {
                str += parts[i].capitalize()
            }
            file << "    $str(\"$string\")${(++c == sorted.size()) ? ";" : ","}\n"
        }
        file << "\n    fun tr() : String {\n"
        file << "        return Localization.getString(key)\n"
        file << "    }\n"
        file << "}"
    }
}

tasks.create('uploadToInternalServer') {
    doLast {
        ant {
            taskdef(name: 'ftp',
                    classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                    classpath: configurations.ftpAntTask.asPath)

            def properties = new Properties()
            properties.load(new File("local.properties").newDataInputStream())
            def internalServer = properties.internalServer
            def internalServerUser = properties.internalServerUser
            def internalServerPassword = properties.internalServerPassword
            def internalServerDir = properties.internalServerDir
            def publicPath = properties.internalServerPublicPath

            def pluginFileContents = "<plugins><plugin id=\"com.icapps.niddler\" url=\"$publicPath/versions/niddler-plugin-${actualPluginVersion}.zip\" version=\"$actualPluginVersion\"/></plugins>"
            def pluginDescriptorFile = new File("niddler-plugin/build/distributions/updatePlugins.xml")
            pluginDescriptorFile.write pluginFileContents

            ftp(server: "$internalServer", userid: "$internalServerUser", password: "$internalServerPassword",
                    remoteDir: "$internalServerDir", passive: 'yes') {
                fileset(dir: "build/distributions") {
                    include(name: "niddler-plugin-${actualPluginVersion}.zip")
                    include(name: "updatePlugins.xml")
                }
            }
        }
    }
}

