buildscript {
    repositories {
        gradlePluginPortal()
    }
}

plugins {
    id 'org.jetbrains.intellij' version '1.5.2'
    id "dev.bmac.intellij.plugin-uploader" version "1.2.2"
    id "com.github.ben-manes.versions" version "0.39.0"
    id 'org.jetbrains.kotlin.jvm'
}

apply from: '../dependencies.gradle'

def actualPluginVersion = hasProperty("internalBuildNumber") ? "$pluginVersion-$internalBuildNumber" : "$pluginVersion"

def localProperties = new Properties()
localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
def StudioCompilePath = localProperties.getProperty('StudioCompilePath')

group 'com.icapps'
version actualPluginVersion

intellij {
    version = versions.minIntelliJ
    updateSinceUntilBuild = false

    plugins = ["java", "dart:203.6912", "io.flutter:65.2.1"]
}
listProductsReleases{
    sinceVersion = "203"
}

patchPluginXml {
    changeNotes = file('change-notes.txt').text
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}
tasks.compileJava {
    options.release.set(11)
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

configurations {
    ftpAntTask
}

sourceSets {
    main.java.srcDirs += "src/main/kotlin"
}

dependencies {
    deps.pluginCompile.each { name, dep ->
        implementation(dep) {
            exclude group: 'org.slf4j', module: 'slf4j-api'
        }
    }
    implementation project(':discovery-plugin-ui')

    implementation(project(path: ':client-lib', configuration: 'default')) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    compileOnly fileTree(dir: "$StudioCompilePath/plugins/android/lib", include: ['*.jar'])
    compileOnly fileTree(dir: "$StudioCompilePath/lib", include: ['*.jar'])

    deps.pluginTestCompile.each { name, dep ->
        testImplementation(dep)
    }
}

signPlugin {
    certificateChain = new File(System.getenv("NIDDLER_PLUGIN_CERTIFICATE_CHAIN")).text
    privateKey = new File(System.getenv("NIDDLER_PLUGIN_PRIVATE_KEY")).text
    password = System.getenv("NIDDLER_PLUGIN_PRIVATE_KEY_PASSWORD")
}

publishPlugin {
    token = System.getenv("NIDDLER_PLUGIN_PUBLISH_TOKEN")
}

uploadPlugin {
    dependsOn(project.tasks.named('signPlugin'))
    def signPluginTask = project.tasks.named("signPlugin").get()
    def archive = signPluginTask.outputArchiveFile.asFile

    def publishToken = System.getenv("PLUGIN_UPLOAD_TOKEN")

    pluginName.set('Niddler')
    file.set(archive.get())
    pluginId.set('com.icapps.niddler')
    version.set(project.version)
    pluginDescription.set(file('plugin_description.txt').text)
    changeNotes.set(file('change-notes.txt').text)
    sinceBuild.set("203")

    url.set(System.getenv("PLUGIN_UPLOAD_PATH"))
    authentication.set("Bearer $publishToken")
}
